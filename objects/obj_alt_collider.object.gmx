<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_alt_collider</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

// Built-in.
phy_fixed_rotation = true;

owner = noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check if collider of prop

if (object_is_ancestor(owner, obj_alt_prop_parent)) {
    phy_position_x = owner.x;
    phy_position_y = owner.y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_alt_damage">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Damage

if (instance_exists(self.owner) &amp;&amp; object_is_ancestor(self.owner.object_index, obj_lifeform_parent) &amp;&amp; instance_exists(other.creator)) {
    if (self.owner != other.creator &amp;&amp;
        !(((object_is_ancestor(self.owner.object_index, obj_player_parent)) &amp;&amp; (object_is_ancestor(other.creator.object_index, obj_player_parent))) ||
        ((object_is_ancestor(self.owner.object_index, obj_enemy_parent)) &amp;&amp; (object_is_ancestor(other.creator.object_index, obj_enemy_parent))))) {
        // Update score counter.
        //TODO Remove.
        if (object_is_ancestor(self.owner.object_index, obj_enemy_parent)) {
            global.damage_score += floor(other.damage);
        }
        
        // Take damage.
        self.owner.hp -= other.damage;
        
        if (other.critical) {
            //TODO Show critical effect.
            spec = instance_create(other.x, other.y, obj_special_damage);
            spec.crit = true;
        } else if (other.fail) {
            //TODO Show fail effect.
            spec = instance_create(other.x, other.y, obj_special_damage);
            spec.crit = false;
        }
    
        //knockback
        if (instance_exists(other.creator)) {
            var dir = point_direction(other.creator.x, other.creator.y, other.x, other.y);
        } else {
            var dir = point_direction(x, y, other.x, other.y);
        }
        var xforce = lengthdir_x(other.knockback, dir);
        var yforce = lengthdir_y(other.knockback, dir);
    
        physics_apply_impulse(other.x, other.y, xforce, yforce);
        
        //blood
        part_system_depth(global.ps_spreading, self.owner.depth);
        part_particles_create(global.ps_spreading, x, y, global.pt_blood, 8);
        
        var blood = instance_create(x, y, obj_blood);
        
        if (object_is_ancestor(owner.object_index, obj_player_parent)) {
            global.shake_intensity = 1;
            owner.alarm[1] = 0.2 * room_speed;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_alt_collider">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide

if (object_is_ancestor(owner.object_index, obj_lifeform_parent)) {
    if (object_is_ancestor(other.owner.object_index, obj_projectile)) {
        if (owner != other.owner.creator) {
            owner.hp -= other.owner.damage;
            
            // Knockback.
            var dir = point_direction(0, 0, other.phy_speed_x, other.phy_speed_y);
            var xforce = lengthdir_x(other.owner.knockback, dir);
            var yforce = lengthdir_y(other.owner.knockback, dir);
        
            physics_apply_impulse(other.x, other.y, xforce, yforce);
            
            //blood
            part_particles_create(global.ps_spreading, x, y, global.pt_blood, 8);
            
            var blood = instance_create(x, y, obj_blood);
            
            // Set an alarm so the projectile can keep going a bit and have the chance to hit another lifeform.
            other.alarm[0] = 1;
        }
    } else if (object_is_ancestor(other.owner.object_index, obj_damage)) {
        if (owner != other.owner.creator) {
            owner.hp -= other.owner.damage;
        
            //knockback
            if (instance_exists(other.owner.creator)) {
                var dir = point_direction(other.owner.creator.x, other.owner.creator.y, other.owner.x, other.owner.y);
            } else {
                var dir = point_direction(x, y, other.owner.x, other.owner.y);
            }
            var xforce = lengthdir_x(other.owner.knockback, dir);
            var yforce = lengthdir_y(other.owner.knockback, dir);
        
            physics_apply_impulse(other.owner.x, other.owner.y, xforce, yforce);
            
            //blood
            part_particles_create(global.ps_spreading, x, y, global.pt_blood, 8);
            
            var blood = instance_create(x, y, obj_blood);
            
            if (object_is_ancestor(owner.object_index, obj_player_parent)) {
                global.shake_intensity = 1;
                owner.alarm[1] = 0.2 * room_speed;
            }
        }
    }
} else if (object_is_ancestor(owner.object_index, obj_alt_prop_parent)) {
    // Handle collisions for prop parent.
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_alt_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Get Damage

if (instance_exists(self.owner) &amp;&amp; object_is_ancestor(self.owner.object_index, obj_lifeform_parent) &amp;&amp; instance_exists(other.creator)) {
    if (self.owner != other.creator &amp;&amp;
        !(((object_is_ancestor(self.owner.object_index, obj_player_parent)) &amp;&amp; (object_is_ancestor(other.creator.object_index, obj_player_parent))) ||
        ((object_is_ancestor(self.owner.object_index, obj_enemy_parent)) &amp;&amp; (object_is_ancestor(other.creator.object_index, obj_enemy_parent))))) {
        owner.hp -= other.damage;
    
        damage = instance_create(other.x, other.y, obj_alt_damage);
        damage.alarm[0] = 20;
        damage.creator = other.creator;
        damage.damage = other.damage;
        damage.critical = other.critical;
        damage.fail = other.fail;
        
        /*// Knockback.
        var dir = point_direction(0, 0, other.phy_speed_x, other.phy_speed_y);
        var xforce = lengthdir_x(other.knockback, dir);
        var yforce = lengthdir_y(other.knockback, dir);
    
        physics_apply_impulse(other.x, other.y, xforce, yforce);
        
        //blood
        part_particles_create(global.ps_spreading, x, y, global.pt_blood, 8);
        
        var blood = instance_create(x, y, obj_blood);*/
        
        // Set an alarm so the projectile can keep going a bit and have the chance to hit another lifeform.
        other.alarm[0] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_alt_collision">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_alt_prop_parent">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Collide
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>4.5</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>8,8</point>
    <point>8,8</point>
  </PhysicsShapePoints>
</object>
