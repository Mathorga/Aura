<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_aura_down_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player_parent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General

mate = instance_find(obj_iryo, 0);
control = CPU;
inventory_sprite = spr_aura_inventory;

global.aura_x = x_start;
global.aura_y = y_start;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sprites

//Stand
sprite[RIGHT, STAND] = spr_aura_right_stand;
sprite[UP, STAND] = spr_aura_up_stand;
sprite[LEFT, STAND] = spr_aura_left_stand;
sprite[DOWN, STAND] = spr_aura_down_stand;

//Walk
sprite[RIGHT, WALK] = spr_aura_right_walk;
sprite[UP, WALK] = spr_aura_up_walk;
sprite[LEFT, WALK] = spr_aura_left_walk;
sprite[DOWN, WALK] = spr_aura_down_walk;

//Run
sprite[RIGHT, RUN] = spr_aura_right_run;
sprite[UP, RUN] = spr_aura_up_run;
sprite[LEFT, RUN] = spr_aura_left_run;
sprite[DOWN, RUN] = spr_aura_down_run;

//Dash
sprite[RIGHT, ROLL] = spr_aura_right_dash;
sprite[UP, ROLL] = spr_aura_up_dash;
sprite[LEFT, ROLL] = spr_aura_left_dash;
sprite[DOWN, ROLL] = spr_aura_down_dash;

//X Attack
sprite[RIGHT, ATK_X] = mate.sprite[RIGHT, ATK_X];
sprite[UP, ATK_X] = mate.sprite[UP, ATK_X];
sprite[LEFT, ATK_X] = spr_aura_left_attack_x;
sprite[DOWN, ATK_X] = mate.sprite[DOWN, ATK_X];

//X2 Attack
sprite[RIGHT, ATK_XX] = mate.sprite[RIGHT, ATK_XX];
sprite[UP, ATK_XX] = mate.sprite[UP, ATK_XX];
sprite[LEFT, ATK_XX] = spr_aura_left_attack_xx;
sprite[DOWN, ATK_XX] = mate.sprite[DOWN, ATK_XX];

//Y Attack
sprite[RIGHT, ATK_Y] = mate.sprite[RIGHT, ATK_Y];
sprite[UP, ATK_Y] = mate.sprite[UP, ATK_Y];
sprite[LEFT, ATK_Y] = spr_aura_left_attack_y;
sprite[DOWN, ATK_Y] = mate.sprite[DOWN, ATK_Y];

//Aim Stand
sprite[RIGHT, AIM_STAND] = sprite[RIGHT, STAND];
sprite[UP, AIM_STAND] = sprite[UP, STAND];
sprite[LEFT, AIM_STAND] = sprite[LEFT, STAND];
sprite[DOWN, AIM_STAND] = sprite[DOWN, STAND];

//Aim Walk
sprite[RIGHT, AIM_WALK] = sprite[RIGHT, WALK];
sprite[UP, AIM_WALK] = sprite[UP, WALK];
sprite[LEFT, AIM_WALK] = sprite[LEFT, WALK];
sprite[DOWN, AIM_WALK] = sprite[DOWN, WALK];

//Aim Walk Back
sprite[RIGHT, AIM_WALK_BACK] = sprite[RIGHT, RUN];
sprite[UP, AIM_WALK_BACK] = sprite[UP, RUN];
sprite[LEFT, AIM_WALK_BACK] = sprite[LEFT, RUN];
sprite[DOWN, AIM_WALK_BACK] = sprite[DOWN, RUN];

//Fall
sprite[RIGHT, FALL] = spr_aura_right_fall;
sprite[UP, FALL] = spr_aura_up_fall;
sprite[LEFT, FALL] = spr_aura_left_fall;
sprite[DOWN, FALL] = spr_aura_down_fall;

//Drown
sprite[RIGHT, DROWN] = spr_aura_right_fall;
sprite[UP, DROWN] = spr_aura_up_fall;
sprite[LEFT, DROWN] = spr_aura_left_fall;
sprite[DOWN, DROWN] = spr_aura_down_fall;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Items

/* Usables. */
for (i = 0; i &lt; 4; i++) {
    usables[i].owner = id;
}

/* Wearables. */
// Rings.
for (i = 0; i &lt; 4; i++) {
    rings[i].owner = id;
}
// Accessories.
for (i = 0; i &lt; 2; i++) {
    accessories[i].owner = id;
}
// Amulet.
amulet.owner = id;
// Special.
special.owner = id;

// Insert initial items.
rings[0].item = instance_create(0, 0, obj_item_ring_test);
rings[1].item = instance_create(0, 0, obj_item_ring_test);
rings[2].item = instance_create(0, 0, obj_item_ring_test);
rings[3].item = instance_create(0, 0, obj_item_ring_test);

accessories[0].item = instance_create(0, 0, obj_item_accessory_test);

usables[2].item = instance_create(0, 0, obj_item_usable_test);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Stats

if (!global.inventory_open) {
    draw_sprite_ext(spr_healthbar_fill, 0, view_xview + view_wview - 108 + ((sprite_get_width(spr_healthbar_fill) * (maxhp - hp)) / maxhp), view_yview + 8, (hp/maxhp), 1, 0, c_white, 1);
    draw_sprite(spr_healthbar_border, 0, view_xview + view_wview - 108, view_yview + 8);
                                                                    
    draw_sprite_ext(spr_stamina_fill, 0, view_xview + view_wview - 108 + ((sprite_get_width(spr_stamina_fill) * (maxenergy - energy)) / maxenergy), view_yview + 18, (energy/maxenergy), 1, 0, c_white, 1);
    draw_sprite(spr_stamina_border, 0, view_xview + view_wview - 108, view_yview + 18);
    
    draw_set_font(fnt_hud);
    draw_set_halign(fa_center);
    draw_set_valign(fa_bottom);
    draw_text(view_xview + view_wview - 120, view_yview + 25, string(lvl));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>4</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>6,48</point>
    <point>18,48</point>
    <point>18,56</point>
    <point>6,56</point>
  </PhysicsShapePoints>
</object>
