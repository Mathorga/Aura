<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_debug</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

// Show built-in debug stats
show_debug_overlay(global.debug);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Manual Debug

if (keyboard_check_pressed(vk_escape)) {
    // Fade to exit screen.
    // scr_fade_to_room(rm_start, true);
    // if (room == rm_start) {
    //     game_end();
    // }
} else if (keyboard_check_pressed(ord("R")) || gamepad_button_check_pressed(0, gp_select)) {
    game_restart();
} else if (keyboard_check_pressed(ord("V")) || gamepad_button_check_pressed(0, gp_stickl)) {
    /*if (global.shaders_enabled) {
        surface_free(global.buffer);
        with (obj_shader_controller) {
            instance_destroy();
        }
        application_surface_draw_enable(true);
    } else {
        global.buffer = surface_create(display_get_width(), display_get_height());
        instance_create(x, y, obj_shader_controller);
    }*/
    global.shaders_enabled = !global.shaders_enabled;
}

/*if (room == rm_start &amp;&amp; keyboard_check_pressed(vk_enter)) {
    room_goto(rm_shieva_r1);
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Debug Info

/*
draw_set_font(fnt_debug);
draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_colour(c_white);
if (room != rm_start) {
    draw_text(350, 240, "h_selector: " + string(obj_inventory_controller.h_selector));
    draw_text(350, 260, "v_selector: " + string(obj_inventory_controller.v_selector));
    draw_text(350, 280, "active_character: " + object_get_name(global.active_character.object_index));
    draw_text(350, 300, "obj_global: " + string(obj_global.id));
    draw_text(350, 320, "current_slot: " + string(global.current_slot));
    if (global.current_slot != noone) {
        draw_text(350, 340, "h_pos: " + string(global.current_slot.h_pos));
        draw_text(350, 360, "v_pos: " + string(global.current_slot.v_pos));
        draw_text(350, 380, "x_coord: " + string(global.current_slot.x_coord));
        draw_text(350, 400, "y_coord: " + string(global.current_slot.y_coord));
        draw_text(350, 420, "selected: " + string(global.current_slot.selected));
    }
    draw_text(350, 440, "selector_x: " + string(obj_inventory_controller.selector_x));
    draw_text(350, 460, "selector_y: " + string(obj_inventory_controller.selector_y));
    //draw_text(5, 320, string(global.active_character));
    //draw_text(5, 340, string(global.item_grabbed_owner));
}
with (global.active_character) {
    draw_text(200, 200, state);
}
if (instance_exists(global.active_character.mate)) {
    with (global.active_character.mate) {
        draw_text(400, 200, state);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Framerate

/*draw_set_font(fnt_debug);
draw_set_colour(c_yellow);

draw_text_transformed(32, 44, string(fps), 3, 3, 0);
draw_text_transformed(32, 88, string(fps_real), 3, 3, 0);*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Avoid Drawing Self
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
