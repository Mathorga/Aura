<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_global</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-3000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General

/*
 * If the game shows D3DXCompile error download directX9.0:
 * https://www.microsoft.com/en-us/download/details.aspx?id=35&amp;44F86079-8679-400C-BFF2-9CA5F2BCBDFC=1
 */

global.active_character = instance_find(obj_iryo, 0);
global.rm = rm_shieva_r1;
global.rm_back = rm_luminata_r1;
global.saving = ds_map_create();
global.shake_intensity = 0;
global.on_alt_floor = false;
global.A_signal = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Graphics

// Buffer surface to use multiple shaders.
global.buffer = surface_create(display_get_width(), display_get_height());
global.shaders_enabled = true;

// Default shaders.
global.shader_a = shd_chromatic_aberration;
global.shader_b = shd_ambient_rughai;
global.shader_c = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug

global.debug = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inventory

global.inventory_open = false;
global.item_grabbed = noone;
global.item_grabbed_owner = noone;
global.item_grabbed_h = noone;
global.item_grabbed_v = noone;

global.current_slot = noone;
global.last_slot = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Pathfinding

global.room_grid = noone;
//global.tile_size_x = 50;
//global.tile_size_y = 50;
global.tile_size_x = TILE_WIDTH;
global.tile_size_y = TILE_HEIGHT;
/*var x_tiles_num = room.width / global.tile_size_x;
var y_tiles_num = room.height / global.tile_size_y;
global.room_grid = ds_grid_create(x_tiles_num, y_tiles_num);

for (i = 0; i &lt; x_tiles_num; i++) {
    for (j = 0; j &lt; y_tiles_num; j++) {
        tile_coord[0] = (room.width / global.tile_size_x) * i;
        tile_coord[1] = (room.height / global.tile_size_y) * j;
        ds_grid_set(global.room_grid, i, j, tile_coord);
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Score

global.damage_score = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Debug

if (!instance_exists(obj_debug) &amp;&amp; global.debug) {
    instance_create(x, y, obj_debug);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Controllers

global.inventory_controller = noone;
global.theme_controller = noone;
global.shader_controller = noone;
global.parallax_controller = noone;
global.particle_controller = noone;
global.score_controller = noone;

if (global.inventory_controller == noone) {
    //global.inventory_controller = instance_create(x, y, obj_inventory_controller);
}
if (global.theme_controller == noone) {
    global.theme_controller = instance_create(id.x, id.y, obj_theme_controller);
}
if (global.shaders_enabled &amp;&amp; global.shader_controller == noone) {
    global.shader_controller = instance_create(id.x, id.y, obj_shader_controller);
}
if (global.parallax_controller == noone) {
    global.parallax_controller = instance_create(id.x, id.y, obj_parallax_controller);
}
if (global.particle_controller == noone) {
    global.particle_controller = instance_create(id.x, id.y, obj_particle_controller);
}
if (global.score_controller == noone) {
    global.score_controller = instance_create(id.x, id.y, obj_score_controller);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Object Deactivation Alarm

self.deactivation_delay = 10;
self.alarm[0] = self.deactivation_delay;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Deactivate Objects Out Of Sight

//if (room_get_name(room) == "rm_rughai_r0_s") {
    instance_activate_all();
    instance_deactivate_region(view_xview[0], view_yview[0], view_wview[0], view_hview[0], false, true);
    instance_activate_object(obj_main_collision);
    instance_activate_object(obj_shader_controller);
    instance_activate_object(obj_parallax_controller);
    instance_activate_object(obj_door_parent);
    instance_activate_object(obj_fade_to);
    instance_activate_object(obj_player_parent);
    instance_activate_object(obj_enemy_parent);
    instance_activate_object(obj_view);
//}

self.alarm[0] = 10
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Regenerate Buffer Surface

if (!surface_exists(global.buffer)) {
    global.buffer = surface_create(display_get_width(), display_get_height());
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset Alpha

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate Shaders

/*if (global.shaders_enabled &amp;&amp; global.shader_controller == noone) {
    global.shader_controller = instance_create(x, y, obj_shader_controller);
} else if (!global.shaders_enabled &amp;&amp; global.shader_controller != noone) {
    instance_destroy(global.shader_controller);
    global.shader_controller = noone;
}*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn Off A Signal

global.A_signal = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete Pathfinding Flow Field

if (ds_exists(global.room_grid, ds_type_grid)) {
    ds_grid_clear(global.room_grid, noone);
    ds_grid_destroy(global.room_grid);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Save Score if Max

/*
if (room = rm_rughai_r0) {
    // Retrieve saved score.
    var load_file = file_text_open_read(working_directory + SAVE_NAME);
    var save_string = file_text_read_string(load_file);
    file_text_close(load_file);
    
    if (real(save_string) &lt; floor(global.damage_score)) {  
        // Save score to file.
        var save_file = file_text_open_write(working_directory + SAVE_NAME);
        file_text_write_string(save_file, string(floor(global.damage_score)));
        file_text_close(save_file);
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Activate All Instances

// Persistent object are not carried if deactivated, so activate all in order to ensure persistence.
instance_activate_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Controllers

//global.inventory_controller = noone;
//global.theme_controller = noone;
global.shader_controller = noone;
global.parallax_controller = noone;
//global.particle_controller = noone;
//global.score_controller = noone;

if (global.inventory_controller == noone) {
    //global.inventory_controller = instance_create(x, y, obj_inventory_controller);
}
if (global.theme_controller == noone) {
    global.theme_controller = instance_create(id.x, id.y, obj_theme_controller);
}
if (global.shaders_enabled &amp;&amp; global.shader_controller == noone) {
    global.shader_controller = instance_create(id.x, id.y, obj_shader_controller);
}
if (global.parallax_controller == noone) {
    global.parallax_controller = instance_create(id.x, id.y, obj_parallax_controller);
}
if (global.particle_controller == noone) {
    global.particle_controller = instance_create(id.x, id.y, obj_particle_controller);
}
if (global.score_controller == noone) {
    global.score_controller = instance_create(id.x, id.y, obj_score_controller);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable the Draw of the Application Surface

application_surface_draw_enable(true);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset A signal

global.A_signal = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create Pathfinding Flow Field

// Clear the current flow field.
/*if (ds_exists(global.room_grid, ds_type_grid)) {
    ds_grid_destroy(global.room_grid);
}*/

if (room_get_name(room) == "rm_rughai_r0" ||
    room_get_name(room) == "rm_rughai_r1_s") {
    var x_tiles_num = floor(room_width / global.tile_size_x);
    var y_tiles_num = floor(room_height / global.tile_size_y);
    global.room_grid = ds_grid_create(x_tiles_num, y_tiles_num);

    for (i = 0; i &lt; x_tiles_num; i++) {
        for (j = 0; j &lt; y_tiles_num; j++) {
            /*tile = ds_grid_get(global.room_grid, i, j)
            if (tile != noone) {
                instance_destroy(tile);
            }*/
            //pos_x = (x_tiles_num / 2) + (i * global.tile_size_x);
            //pos_y = (y_tiles_num / 2) + (j * global.tile_size_y);
            pos_x = (global.tile_size_x / 2) + (i * global.tile_size_x);
            pos_y = (global.tile_size_y / 2) + (j * global.tile_size_y);
            var grid_position = instance_create(pos_x, pos_y, obj_grid_position);
            grid_position.grid_x = i;
            grid_position.grid_y = j;
            ds_grid_set(global.room_grid, i, j, grid_position);
        }
    }
    
    // Perform the user defined event for all positions, so that they can correctly find their neighbors.
    //event_perform_object(obj_grid_position, ev_user0, 0);
    /*for (i = 0; i &lt; x_tiles_num; i++) {
        for (j = 0; j &lt; y_tiles_num; j++) {
            var tile = ds_grid_get(global.room_grid, i, j);
            with (tile) {
                event_user(0);
            }
        }
    }*/
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset score

/*
if (room = rm_rughai_r0) {
    global.damage_score = 0;
} else {
    var load_file = file_text_open_read(working_directory + SAVE_NAME);
    var save_string = file_text_read_string(load_file);
    file_text_close(load_file);
    global.damageScore = floor(real(save_string));
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
