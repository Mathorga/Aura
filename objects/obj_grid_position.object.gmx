<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_marker</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>-1530494977</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///General

// Room grid indexes.
id.grid_x = -1;
id.grid_y = -1;

// Neighbors.
id.neighbors = ds_list_create();

// Tile borders.
id.tile_min_x = id.x - (global.tile_size_x / 2);
id.tile_max_x = id.x + (global.tile_size_x / 2);
id.tile_min_y = id.y - (global.tile_size_y / 2);
id.tile_max_y = id.y + (global.tile_size_y / 2);

// Validity.
id.valid = true;

// Next step.
id.next = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Set Validity

/*if (collision_rectangle(self.tile_min_x + 1, self.tile_min_y + 1, self.tile_max_x - 1, self.tile_max_y - 1, obj_main_collision, false, true) != noone ||
    collision_rectangle(self.tile_min_x + 1, self.tile_min_y + 1, self.tile_max_x - 1, self.tile_max_y - 1, obj_fall_sensor, false, true) != noone) {
    self.valid = false;
}*/

if (place_meeting(id.x, id.y, obj_main_collision) ||
    place_meeting(id.x, id.y, obj_fall_sensor)) {
    id.valid = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Delete Neighbors List

ds_list_destroy(self.neighbors);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Find Neighbors

//if (id.grid_x != -1 &amp;&amp; id.grid_y != -1 &amp;&amp; ds_list_size(id.neighbors) == 0 &amp;&amp; id.valid) {
if (ds_list_size(id.neighbors) == 0 &amp;&amp; id.valid) {        
    var x_tiles_num = floor(room_width / global.tile_size_x);
    var y_tiles_num = floor(room_height / global.tile_size_y);
    
    var left    = id.grid_x - 1;
    var right   = id.grid_x + 1;
    var up      = id.grid_y - 1;
    var down    = id.grid_y + 1;
    
    if (up &lt; 0 &amp;&amp; right &gt;= x_tiles_num) {
        // Top-right corner.
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,       id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x,  down));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,       down));
    } else if (right &gt;= x_tiles_num &amp;&amp; down &gt;= y_tiles_num) {
        // Bottom-right corner.
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,       id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x,  up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,       up));
    } else if (left &lt; 0 &amp;&amp; down &gt;= y_tiles_num) {
        // Bottom-left corner.
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       up));
    } else if (left &lt; 0 &amp;&amp; up &lt; 0) {
        // Top-left corner.
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, down));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       down));
    } else if (right &gt;= x_tiles_num) {
        // Right side.
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, down));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        down));
    } else if (down &gt;= y_tiles_num) {
        // Bottom side.
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       up));
    } else if (left &lt; 0) {
        // Left side.
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, down));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       up));
    } else if (up &lt; 0) {
        // Top side.
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, down));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       down));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        down));
    } else {
        // Center.
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        id.grid_y));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, down));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, id.grid_x, up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       down));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        down));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, left,        up));
        ds_list_add(id.neighbors, ds_grid_get(global.room_grid, right,       up));
    }
    /*
    id.neighbors[0] = ds_grid_get(global.room_grid, id.grid_x - 1, id.grid_y);
    id.neighbors[1] = ds_grid_get(global.room_grid, id.grid_x - 1, id.grid_y - 1);
    id.neighbors[2] = ds_grid_get(global.room_grid, id.grid_x,     id.grid_y - 1);
    id.neighbors[3] = ds_grid_get(global.room_grid, id.grid_x + 1, id.grid_y - 1);
    id.neighbors[4] = ds_grid_get(global.room_grid, id.grid_x + 1, id.grid_y);
    id.neighbors[5] = ds_grid_get(global.room_grid, id.grid_x + 1, id.grid_y + 1);
    id.neighbors[6] = ds_grid_get(global.room_grid, id.grid_x,     id.grid_y + 1);
    id.neighbors[7] = ds_grid_get(global.room_grid, id.grid_x - 1, id.grid_y + 1);
    */
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Direction

if (instance_exists(self.next) &amp;&amp;
    self.next != noone) {
    scr_debug_draw_line(self.x, self.y, self.next.x, self.next.y, c_white, c_red, 0.8);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
