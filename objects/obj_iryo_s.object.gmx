<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_iryo_down_stand_s</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_player_parent_s</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mode

self.mode = scr_player_control_mode;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Sprites

// Stand.
sprite[RIGHT, STAND] = spr_iryo_right_stand_s;
sprite[UP, STAND] = spr_iryo_up_stand_s;
sprite[LEFT, STAND] = spr_iryo_left_stand_s;
sprite[DOWN, STAND] = spr_iryo_down_stand_s;

// Walk.
sprite[RIGHT, WALK] = spr_iryo_right_stand_s;
sprite[UP, WALK] = spr_iryo_up_stand_s;
sprite[LEFT, WALK] = spr_iryo_left_stand_s;
sprite[DOWN, WALK] = spr_iryo_down_walk_s;

// Run.
sprite[RIGHT, RUN] = spr_iryo_right_run_s;
sprite[UP, RUN] = spr_iryo_up_stand_s;
sprite[LEFT, RUN] = spr_iryo_left_run_s;
sprite[DOWN, RUN] = spr_iryo_down_run_s;

// Roll.
sprite[RIGHT, ROLL] = spr_iryo_right_roll;
sprite[UP, ROLL] = spr_iryo_up_roll;
sprite[LEFT, ROLL] = spr_iryo_left_roll;
sprite[DOWN, ROLL] = spr_iryo_down_roll;

// X Attack.
sprite[RIGHT, ATK_X] = spr_iryo_right_attack_x;
sprite[UP, ATK_X] = spr_iryo_up_attack_x;
sprite[LEFT, ATK_X] = spr_iryo_left_attack_x;
sprite[DOWN, ATK_X] = spr_iryo_down_attack_x;

// X2 Attack.
sprite[RIGHT, ATK_XX] = spr_iryo_right_attack_xx;
sprite[UP, ATK_XX] = spr_iryo_up_attack_xx;
sprite[LEFT, ATK_XX] = spr_iryo_left_attack_xx;
sprite[DOWN, ATK_XX] = spr_iryo_down_attack_xx;

// Y Attack.
sprite[RIGHT, ATK_Y] = spr_iryo_right_attack_y;
sprite[UP, ATK_Y] = sprite[UP, ATK_X];
sprite[LEFT, ATK_Y] = spr_iryo_left_attack_y;
sprite[DOWN, ATK_Y] = sprite[RIGHT, ATK_Y];

// Aim Stand.
sprite[RIGHT, AIM_STAND] = spr_iryo_right_aim_stand;
sprite[UP, AIM_STAND] = spr_iryo_up_aim_stand;
sprite[LEFT, AIM_STAND] = spr_iryo_left_aim_stand;
sprite[DOWN, AIM_STAND] = spr_iryo_down_aim_stand;

// Aim Walk.
sprite[RIGHT, AIM_WALK] = sprite[RIGHT, WALK];
sprite[UP, AIM_WALK] = sprite[UP, WALK];
sprite[LEFT, AIM_WALK] = sprite[LEFT, WALK];
sprite[DOWN, AIM_WALK] = sprite[DOWN, WALK];

// Aim Walk Back.
sprite[RIGHT, AIM_WALK_BACK] = spr_iryo_right_aim_walk_back;
sprite[UP, AIM_WALK_BACK] = sprite[UP, RUN];
sprite[LEFT, AIM_WALK_BACK] = spr_iryo_left_aim_walk_back;
sprite[DOWN, AIM_WALK_BACK] = sprite[DOWN, RUN];

// Fall.
sprite[RIGHT, FALL] = spr_iryo_right_fall;
sprite[UP, FALL] = spr_iryo_up_fall;
sprite[LEFT, FALL] = spr_iryo_left_fall;
sprite[DOWN, FALL] = spr_iryo_down_fall;

// Drown.
sprite[RIGHT, DROWN] = spr_iryo_right_fall;
sprite[UP, DROWN] = spr_iryo_up_fall;
sprite[LEFT, DROWN] = spr_iryo_left_fall;
sprite[DOWN, DROWN] = spr_iryo_down_fall;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Inherit

event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Stats

var scale_factor = 3;
var hoffset = TILE_WIDTH * 0.5;
var voffset = TILE_HEIGHT * 0.5;
var width = TILE_WIDTH * 4;
var height = TILE_HEIGHT * 1.5;

// Draw health.
draw_set_alpha(0.5);
draw_roundrect_colour_ext(hoffset * scale_factor,
                          voffset * scale_factor,
                          hoffset + (width * (id.hp / id.maxhp)) * scale_factor,
                          height * scale_factor,
                          0,
                          0,
                          c_green,
                          c_green,
                          false);

draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>4</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
