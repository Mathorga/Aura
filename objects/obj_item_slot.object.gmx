<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_item_slot</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

owner = noone;
item = noone;
selected = false;
scale = 1;
h_pos = 0;
v_pos = 0;
x_coord = view_xview + 25;
y_coord = view_yview + 20;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control Size

if (item != noone) {
    if (item.grabbed) {
        scale = 1.5;
    }
}
if (selected &amp;&amp; owner == global.active_character) {
    global.last_slot = global.current_slot;
    global.current_slot = id;
    if (scale &lt; 1.5) {
        scale += 0.1;
    }
} else {
    if (scale &gt; 1) {
        scale -= 0.1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clean on Inventory Close

if (!global.inventory_open) {
    if (item != noone) {
        item.grabbed = false;
    }
    selected = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="73">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the Item
/*
if (global.inventory_open) {

    if (owner == global.active_character) {

        draw_set_halign(fa_center);
        draw_set_valign(fa_middle);
        if (v_pos &lt; 8) {
            if (h_pos == 0) {                                           // Wearables.
                if (v_pos &lt; 4) {
                    x_coord = 25;
                    y_coord = (20 * (v_pos + 1));
                } else if (v_pos &lt; 6 &amp;&amp; v_pos &gt;= 4) {
                    x_coord = 25;
                    y_coord = (20 * (v_pos + 1)) + 30;
                } else if (v_pos == 6) {
                    x_coord = 25;
                    y_coord = (20 * (v_pos + 1)) + 60;
                } else {
                    x_coord = 25;
                    y_coord = (20 * (v_pos + 1)) + 90;
                }
            } else {                                                    // Usables.
                x_coord = 155 + (50 * h_pos);
                y_coord = 250;
            }
        } else {                                                        // Bag.
            var slot = view_wview / 10;
            x_coord = (slot * (h_pos + 1) - slot / 2);
            y_coord = 290;
        }
        if (item != noone) {
            var alpha = obj_inventory_controller.alpha;
            if (global.item_grabbed != noone) {
                if (global.item_grabbed.type != RING) {
                
                }
            }
            
            // Draw sprite.
            draw_sprite_ext(item.sprite_index, item.image_index, view_xview + x_coord, view_yview + y_coord, scale, scale, 0, c_white, obj_inventory_controller.alpha);
            // Draw description.
            if (selected) {
                draw_set_colour(c_white);
                draw_set_halign(fa_left);
                draw_set_valign(fa_top);
                draw_text_ext(view_xview + 225, view_yview + 15, item.description, 20, 150);                
                draw_set_halign(fa_center);
                draw_set_valign(fa_middle);
            }            
            
            // If the item is wearable.
            if ((item.type == RING || item.type == ACCESSORY ||
                 item.type == AMULET || item.type == SPECIAL) &amp;&amp; !item.in_bag) {
                // Draw Name.
                draw_set_halign(fa_left);
                draw_set_valign(fa_middle);
                if (item.grabbed) {
                    scale = 1.5;
                }
                draw_text_colour(view_xview + x_coord + 15 * scale, view_yview + y_coord, item.name, c_white, c_white, c_white, c_white, 1);
            }
            if (item.in_bag) {
                // TODO Draw name over the object.
            }
        } else {
            //draw_sprite_ext(spr_item_slot, 0, x_coord, y_coord, scale, scale, 0, c_white, obj_inventory_controller.alpha);
            draw_set_colour(c_dkgray);
            draw_set_halign(fa_center);
            draw_set_valign(fa_middle);
            //draw_sprite_ext(sprite_index, image_index, x_coord, y_coord, scale, scale, 0, c_white, obj_inventory_controller.alpha);
            draw_circle(view_xview + x_coord, view_yview + y_coord, 3 * scale, false);
            if (h_pos == 0 &amp;&amp; v_pos &lt; 8) {
                draw_set_halign(fa_left);
                draw_set_valign(fa_middle);
                draw_text_colour(view_xview + x_coord + 15, view_yview + y_coord, "---", c_white, c_white, c_white, c_white, 1);
            }
            draw_set_colour(c_black);
        }
    }
} else {
    if (owner == global.active_character) {
        if (v_pos == 7 &amp;&amp; h_pos &gt; 0) {                  // Usables.
            x_coord = 155 + (50 * h_pos);
            y_coord = 250;
            
            if (item != noone) {
                // Draw sprite.
                draw_sprite_ext(item.sprite_index, item.image_index, view_xview + x_coord, view_yview + y_coord + 40, scale, scale, 0, c_white, 1 - obj_inventory_controller.alpha);
            } else {
                draw_circle(view_xview + x_coord, view_yview + y_coord + 40, 3 * scale, false);
            }
        }
    }
}

draw_set_alpha(1);                  // Reset alpha.
draw_set_colour(c_black);           // Reset color.
draw_set_halign(fa_left);           // Reset halign.
draw_set_valign(fa_top);            // Reset valign.
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
