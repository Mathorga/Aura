<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_parent_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Variables

id.right = false;
id.left = false;
id.up = false;
id.down = false;
id.select = false;
id.back = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entries

// To be set in children objects.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entry-free Actions

id.back_action = noone;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initialize

id.x_center = room_width / 2;
id.y_center = room_height / 2;

id.padding_top = room_height / 10;
id.padding_bottom = padding_top;

id.title = noone;
id.title_y = id.y_center;

// Wait time for direction movement on continuous button press.
id.direction_hold_delay = room_speed / 6;

// Used to check if selector should move or not:
// If an action has been taken, then the selector shouldn't be able to move or select anything else.
id.action_taken = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Button Press Delay Alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Clear Input

scr_input_clear_menu();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Input

if (!id.action_taken) {
    if (gamepad_is_connected(0)) {
        scr_input_menu_gamepad(0);
    } else {
        scr_input_menu_keyboard();
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector Positions

if (id.down &amp;&amp; !id.up) {
    id.v_selector++;
    id.v_selector %= array_length_1d(id.entries);
    audio_play_sound(snd_menu_tick, 0, false);
}

if (id.up &amp;&amp; !id.down) {
    id.v_selector--;
    if (id.v_selector &lt; 0) {
        id.v_selector = array_length_1d(id.entries) - 1;
    }
    //id.v_selector %= array_length_1d(id.entries_y);
    audio_play_sound(snd_menu_tick, 0, false);
}

if (id.left &amp;&amp; !id.right) {
    id.h_selector--;
}

if (id.right &amp;&amp; !id.left) {
    id.h_selector++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector Movement

var dir = point_direction(id.selector_x, id.selector_y, id.selector_x, id.entries[id.v_selector].y);
var len = point_distance(id.selector_x, id.selector_y, id.selector_x, id.entries[id.v_selector].y) * id.selector_move_speed;

id.selector_x += lengthdir_x(len, dir);
id.selector_y += lengthdir_y(len, dir);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select Entry

if (id.select) {
    if (id.entries[id.v_selector].action != noone) {
        id.action_taken = true;
        script_execute(id.entries[id.v_selector].action);
        audio_play_sound(snd_menu_tick, 0, false);
    }
}

if (id.back) {
    if (id.back_action != noone) {
        id.action_taken = true;
        script_execute(id.back_action);
        audio_play_sound(snd_menu_tick, 0, false);
    }
}

if (id.right &amp;&amp; !id.left) {
    if (id.entries[id.v_selector].value != -1 &amp;&amp;
        id.entries[id.v_selector].value &lt; id.entries[id.v_selector].max_value) {
        id.entries[id.v_selector].value++;
        audio_play_sound(snd_menu_tick, 0, false);
    }
}

if (id.left &amp;&amp; !id.right) {
    if (id.entries[id.v_selector].value != -1 &amp;&amp;
        id.entries[id.v_selector].value &gt; 0) {
        id.entries[id.v_selector].value--;
        audio_play_sound(snd_menu_tick, 0, false);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Menu

// Set alignment.
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draw title.
if (id.title != noone) {
    draw_set_font(fnt_menu_title);
    draw_text(id.x_center, id.title_y, string(id.title));
}

// Draw selector.
draw_set_alpha(0.2);
draw_roundrect_colour_ext(id.x_center - id.selector_width / 2,
                          id.entries[id.v_selector].y - 1,//id.selector_height / 2,
                          id.x_center + id.selector_width / 2,
                          id.entries[id.v_selector].y + 1,//id.selector_height / 2,
                          20,
                          20,
                          c_white,
                          c_white,
                          false);
draw_set_alpha(1);

// Draw entries.
draw_set_font(fnt_test);
for (i = 0; i &lt; id.entries_num; i++) {
    if (i == id.v_selector) {
        // Draw selected entry.
        if (id.entries[i].scale &lt; id.entries[i].max_scale) {
            id.entries[i].scale += id.entries[i].scale_speed;
            if (id.entries[i].scale_speed &gt; id.entries[i].min_scale_speed) {
                id.entries[i].scale_speed -= id.entries[i].scale_accel;
            } else {
                id.entries[i].scale_speed = id.entries[i].min_scale_speed;
            }
        }
    } else {
        // Draw unselected entry.
        if (id.entries[i].scale &gt; id.entries[i].min_scale) {
            id.entries[i].scale -= id.entries[i].scale_speed;
            if (id.entries[i].scale_speed &lt; id.entries[i].max_scale_speed) {
                id.entries[i].scale_speed += id.entries[i].scale_accel;
            } else {
                id.entries[i].scale_speed = id.entries[i].max_scale_speed;
            }
        }
    }
}

// Reset alignment.
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
