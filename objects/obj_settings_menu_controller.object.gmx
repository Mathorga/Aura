<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input Variables

id.right = false;
id.left = false;
id.up = false;
id.down = false;
id.select = false;
id.back = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entries Text

id.entries_text[0] = "Music Volume";
id.entries_text[1] = "Effects Volume";
id.entries_text[2] = "Graphics";
id.entries_text[3] = "Back";
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entries Action

id.entries_action[0] = noone;
id.entries_action[1] = noone;
id.entries_action[2] = noone;
id.entries_action[3] = scr_settings_menu_back;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Entries Value

id.max_entry_value = 10;
id.default_entry_value = 5;

id.entries_value[0] = id.default_entry_value;
id.entries_value[1] = id.default_entry_value;
id.entries_value[2] = id.default_entry_value;
id.entries_value[3] = -1;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

// The increment in alpha when opening/closing the menu.
id.alpha_increment = 0.1;

// Alpha value of the whole menu.
id.alpha = 0;
id.min_text_scale = 0.86;
id.max_text_scale = 1;
id.min_text_scale_speed = 0.01;
id.max_text_scale_speed = 0.05;
id.text_scale_accel = 0.02;

id.padding_top = room_height / 10;
id.padding_bottom = padding_top;

id.entries_num = 4;

id.slots_num = id.entries_num;

id.x_unit = room_width / 20;
id.y_unit = (room_height - padding_top - padding_bottom) / slots_num;
id.x_center = room_width / 2;
id.y_center = room_height / 2;

var full_slots_num = 0;

// Coordinates of all menu entries.
for (i = 0; i &lt; entries_num; i++) {
    id.entries_scale[i] = id.min_text_scale;
    id.entries_scale_speed[i] = id.max_text_scale_speed;
    // Simplified (y_unit * full_slots_num) + (y_unit / 2)
    id.entries_y[i] = y_unit * (full_slots_num + 0.5);
    id.entries_y[i] += padding_top;
    full_slots_num++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector

id.v_selector = 0;         // Controls the vertical position of the selector.
id.h_selector = 0;         // Controls the horizontal position of the selector.
id.selector_x = view_xview;
id.selector_y = view_yview;
id.selector_width = 200;
id.selector_height = 30;
id.selector_move_speed = 30 / room_speed;
id.selector_scale_speed = 30 / room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Slider

id.slider_bg_height = 30;
id.slider_padding = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Input

if (gamepad_is_connected(0)) {
    scr_start_menu_gamepad(0);
} else {
    scr_start_menu_keyboard();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector Positions

if (id.down) {
    id.v_selector++;
    id.v_selector %= array_length_1d(id.entries_y);
}

if (id.up) {
    id.v_selector--;
    if (id.v_selector &lt; 0) {
        id.v_selector = array_length_1d(id.entries_y) - 1;
    }
    //id.v_selector %= array_length_1d(id.entries_y);
}

if (id.left) {
    id.h_selector--;
}

if (id.right) {
    id.h_selector++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector Movement

var dir = point_direction(id.selector_x, id.selector_y, id.selector_x, id.entries_y[id.v_selector]);
var len = point_distance(id.selector_x, id.selector_y, id.selector_x, id.entries_y[id.v_selector]) * id.selector_move_speed;

id.selector_x += lengthdir_x(len, dir);
id.selector_y += lengthdir_y(len, dir);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Select Entry

if (id.select) {
    if (id.entries_action[id.v_selector] != noone) {
        script_execute(id.entries_action[id.v_selector]);
    }
} else if (id.back) {
    scr_settings_menu_back();
} else if (id.right) {
    if (id.entries_value[id.v_selector] != -1 &amp;&amp;
        id.entries_value[id.v_selector] &lt; id.max_entry_value) {
        id.entries_value[id.v_selector]++;
    }
} else if (id.left) {
    if (id.entries_value[id.v_selector] != -1 &amp;&amp;
        id.entries_value[id.v_selector] &gt; 0) {
        id.entries_value[id.v_selector]--;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Menu

// Set alignment.
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draw selector.
draw_set_alpha(0.2);
draw_roundrect_colour_ext(id.x_center - id.selector_width / 2,
                          id.entries_y[id.v_selector] - 1,//id.selector_height / 2,
                          id.x_center + id.selector_width / 2,
                          id.entries_y[id.v_selector] + 1,//id.selector_height / 2,
                          20,
                          20,
                          c_white,
                          c_white,
                          false);
draw_set_alpha(1);

// Draw entries.
draw_set_font(fnt_test);
for (i = 0; i &lt; id.entries_num; i++) {
    if (i == id.v_selector) {
        // Draw selected entry.
        if (id.entries_scale[i] &lt; id.max_text_scale) {
            id.entries_scale[i] += id.entries_scale_speed[i];
            if (id.entries_scale_speed[i] &gt; id.min_text_scale_speed) {
                id.entries_scale_speed[i] -= id.text_scale_accel;
            } else {
                id.entries_scale_speed[i] = id.min_text_scale_speed;
            }
        }
    } else {
        // Draw unselected entry.
        if (id.entries_scale[i] &gt; id.min_text_scale) {
            id.entries_scale[i] -= id.entries_scale_speed[i];
            if (id.entries_scale_speed[i] &lt; id.max_text_scale_speed) {
                id.entries_scale_speed[i] += id.text_scale_accel;
            } else {
                id.entries_scale_speed[i] = id.max_text_scale_speed;
            }
        }
    }
    // Check if current entry has values. if so, draw it to the side, else draw it centered.
    if (id.entries_value[i] == -1) {
        draw_text_transformed(id.x_center, id.entries_y[i], id.entries_text[i], id.entries_scale[i], id.entries_scale[i], 0);
    } else {
        draw_set_halign(fa_right);
        draw_text_transformed(id.x_center - id.x_unit, id.entries_y[i], id.entries_text[i], id.entries_scale[i], id.entries_scale[i], 0);
        draw_set_halign(fa_left);
        var slider_bg_x1 = id.x_center + id.x_unit;
        var slider_bg_x2 = room_width - (id.x_unit * 2);
        var slider_bg_width = slider_bg_x2 - slider_bg_x1;
        var slider_bg_y1 = id.entries_y[i] - ((id.slider_bg_height / 2) * id.entries_scale[i]);
        var slider_bg_y2 = id.entries_y[i] + ((id.slider_bg_height / 2) * id.entries_scale[i]);
        /*draw_rectangle_colour(slider_bg_x1,
                              slider_bg_y1,
                              slider_bg_x1 + (slider_bg_width * id.entries_scale[i]),
                              slider_bg_y2,
                              c_dkgray,
                              c_dkgray,
                              c_dkgray,
                              c_dkgray,
                              false);*/
        draw_roundrect_colour(slider_bg_x1,
                              slider_bg_y1,
                              slider_bg_x1 + (slider_bg_width * id.entries_scale[i]),
                              slider_bg_y2,
                              c_dkgray,
                              c_dkgray,
                              false);
        if (id.entries_value[i] &gt; 0) {
            var slider_x1 = slider_bg_x1 + id.slider_padding;
            var slider_x2 = slider_bg_x2 - id.slider_padding;
            var slider_max_width = slider_x2 - slider_x1;
            var slider_unit_width = slider_max_width / id.max_entry_value;
            var slider_width = slider_unit_width * id.entries_value[i];
            var slider_y1 = id.entries_y[i] - (((id.slider_bg_height / 2) - id.slider_padding) * id.entries_scale[i]);
            var slider_y2 = id.entries_y[i] + (((id.slider_bg_height / 2) - id.slider_padding) * id.entries_scale[i]);
            /*draw_rectangle_colour(slider_x1,
                                  slider_y1,
                                  slider_x1 + (slider_width * id.entries_scale[i]),
                                  slider_y2,
                                  c_gray,
                                  c_gray,
                                  c_gray,
                                  c_gray,
                                  false);*/
            draw_roundrect_colour(slider_x1,
                                  slider_y1,
                                  slider_x1 + (slider_width * id.entries_scale[i]),
                                  slider_y2,
                                  c_gray,
                                  c_gray,
                                  false);
        }
        draw_set_halign(fa_center);
    }
}

// Reset alignment.
draw_set_halign(fa_left);
draw_set_valign(fa_top);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
