<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_controller_s</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize

// The increment in alpha when opening/closing the menu.
id.alpha_increment = 0.1;

// Alpha value of the whole menu.
id.alpha = 0;
id.min_text_scale = 0.86;
id.max_text_scale = 1;
id.min_text_scale_speed = 0.01;
id.max_text_scale_speed = 0.05;
id.text_scale_accel = 0.02;

// Input variables.
id.right = false;
id.left = false;
id.up = false;
id.down = false;
id.select = false;

id.entries_num = 4;

id.slots_num = id.entries_num + 3;

id.x_unit = room_width / 8;
id.y_unit = room_height / slots_num;
id.x_center = room_width / 2;
id.y_center = room_height / 2;

id.entries_text[0] = "Continue";
id.entries_text[1] = "New Game";
id.entries_text[2] = "Settings";
id.entries_text[3] = "Quit";

id.entries_action[0] = noone;
id.entries_action[1] = scr_start_menu_new_game;
id.entries_action[2] = noone;
id.entries_action[3] = scr_start_menu_quit;

// 2 slots are taken by the title.
var full_slots_num = 3;

// Coordinates of all menu entries.
for (i = 0; i &lt; entries_num; i++) {
    id.entries_scale[i] = id.min_text_scale;
    id.entries_scale_speed[i] = id.max_text_scale_speed;
    id.entries_y[i] = y_unit * full_slots_num;
    full_slots_num++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector

id.v_selector = 0;         // Controls the vertical position of the selector.
id.h_selector = 0;         // Controls the horizontal position of the selector.
id.selector_x = view_xview;
id.selector_y = view_yview;
id.selector_width = 200;
id.selector_height = 30;
id.selector_move_speed = 30 / room_speed;
id.selector_scale_speed = 30 / room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get Input

if (gamepad_is_connected(0)) {
    scr_start_menu_gamepad(0);
} else {
    scr_start_menu_keyboard();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector Positions

if (id.down) {
    id.v_selector++;
    id.v_selector %= array_length_1d(id.entries_y);
}

if (id.up) {
    id.v_selector--;
    if (id.v_selector &lt; 0) {
        id.v_selector = array_length_1d(id.entries_y) - 1;
    }
    //id.v_selector %= array_length_1d(id.entries_y);
}

if (id.left) {
    id.h_selector--;
}

if (id.right) {
    id.h_selector++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Selector Movement

var dir = point_direction(id.selector_x, id.selector_y, id.selector_x, id.entries_y[id.v_selector]);
var len = point_distance(id.selector_x, id.selector_y, id.selector_x, id.entries_y[id.v_selector]) * id.selector_move_speed;

id.selector_x += lengthdir_x(len, dir);
id.selector_y += lengthdir_y(len, dir);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Select Entry

if (id.select) {
    if (id.entries_action[id.v_selector] != noone) {
        script_execute(id.entries_action[id.v_selector]);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Menu

// Set alignment.
draw_set_halign(fa_center);
draw_set_valign(fa_middle);

// Draw title.
draw_set_font(fnt_menu_title);
draw_text(id.x_center, id.y_unit, "RUGHAI");

// Draw entries.
draw_set_font(fnt_test);
for (i = 0; i &lt; id.entries_num; i++) {
    if (i == id.v_selector) {
        if (id.entries_scale[i] &lt; id.max_text_scale) {
            id.entries_scale[i] += id.entries_scale_speed[i];
            if (id.entries_scale_speed[i] &gt; id.min_text_scale_speed) {
                id.entries_scale_speed[i] -= id.text_scale_accel;
            } else {
                id.entries_scale_speed[i] = id.min_text_scale_speed;
            }
        }
    } else {
        if (id.entries_scale[i] &gt; id.min_text_scale) {
            id.entries_scale[i] -= id.entries_scale_speed[i];
            if (id.entries_scale_speed[i] &lt; id.max_text_scale_speed) {
                id.entries_scale_speed[i] += id.text_scale_accel;
            } else {
                id.entries_scale_speed[i] = id.max_text_scale_speed;
            }
        }
    }
    draw_text_transformed(id.x_center, id.entries_y[i], id.entries_text[i], id.entries_scale[i], id.entries_scale[i], 0);
}

// Reset alignment.
draw_set_halign(fa_left);
draw_set_valign(fa_top);

// Draw selector.
draw_set_alpha(0.2);
draw_roundrect_colour_ext(id.x_center - id.selector_width / 2,
                          id.entries_y[id.v_selector] - id.selector_height / 2,
                          id.x_center + id.selector_width / 2,
                          id.entries_y[id.v_selector] + id.selector_height / 2,
                          20,
                          20,
                          c_white,
                          c_white,
                          false);
draw_rectangle(id.x_center - id.selector_width / 2 - 20,
               id.entries_y[id.v_selector] - 1,
               id.x_center + id.selector_width / 2 + 20,
               id.entries_y[id.v_selector] + 1,
               false);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
