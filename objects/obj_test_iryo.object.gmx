<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rughai_plant_1_s</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Input
gamepad_set_axis_deadzone(0, 0.25);
var h = gamepad_axis_value(0, gp_axislh);  //-1 &lt;-&gt; 1
var v = gamepad_axis_value(0, gp_axislv);

id.spd = 3
id.dir = point_direction(0, 0, h, v);
id.len = point_distance(0, 0, h, v) * id.spd;

id.hor = lengthdir_x(len, dir);
id.ver = lengthdir_y(len, dir);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement1
/*
//var h = abs(round(hor));
//var v = abs(round(ver));
var h = abs(hor);
var v = abs(ver);
var step = 0.001;

// Move as far as I can without colliding.
while (h &gt; 0 &amp;&amp; v &gt; 0) {        
    if (!place_meeting(x + sign(hor), y + sign(ver), obj_test_collision)) {
        x += sign(hor) * step;
        y += sign(ver) * step;
    } else {
        break;
    }
    h -= step;
    v -= step;
}
while (h &gt; 0) {        
    if (!place_meeting(x + sign(hor), y, obj_test_collision)) {
        x += sign(hor) * step;
    } else {
        break;
    }
    h -= step;
}
while (v &gt; 0) {        
    if (!place_meeting(x, y + sign(ver), obj_test_collision)) {
        y += sign(ver) * step;
    } else {
        break;
    }
    v -= step;
}

h *= sign(hor);
v *= sign(ver);

var i = 0;
var j = 0;

while (abs(i) &lt; abs(h)) {
    if (sign(ver) != 0) {
        if (!place_meeting(x + (h - i), y + (abs(i) * sign(ver) * -1), obj_test_collision)) {
            x += (h - i);
            y += (abs(i) * sign(ver) * -1);
            break;
        }
    } else {
        if (!place_meeting(x + (h - i), y + abs(i), obj_test_collision) ) {
            x += (h - i);
            y += abs(i);
            break;
        } else if (!place_meeting(x + (h - i), y + (-abs(i)), obj_test_collision)) {
            x += (h - i);
            y += (-abs(i));
            break;
        }
    }
    i += sign(h) * step;
}

while (abs(j) &lt; abs(v)) {
    if (sign(hor) != 0) {
        if (!place_meeting(x + (abs(j) * sign(hor) * -1), y + (v - j), obj_test_collision)) {
            x += (abs(j) * sign(hor) * -1);
            y += (v - j);
            break;
        }
    } else {
        if (!place_meeting(x + abs(j), y + (v - j), obj_test_collision)) {
            x += abs(j);
            y += (v - j);
            break;
        } else if (!place_meeting(x + (-abs(j)), y + (v - j), obj_test_collision)) {
            x += (-abs(j));
            y += (v - j);
            break;
        }
    }
    j += sign(v) * step;
}

//i = abs(i);
//j = abs(j);

/*if (abs(i) &lt; abs(j)) {
    x += (h - i);
    y += (abs(i) * sign(ver) * -1);
} else if (abs(j) &lt; abs(i)) {
    x += (abs(j) * sign(hor) * -1);
    y += (v - j);
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement2

/*var xtarg = x + hor;
var ytarg = y + ver;

if (place_free(xtarg, ytarg)) {
    x = xtarg;
    y = ytarg;
} else {
    var sweep_interval = 10;

    for (var angle = sweep_interval; angle &lt;= 80; angle += sweep_interval) {
        for (var multiplier = -1; multiplier &lt;= 1; multiplier += 2) {   
            var angle_to_check = dir + angle * multiplier;
            xtarg = x + lengthdir_x(len, angle_to_check);
            ytarg = y + lengthdir_y(len, angle_to_check);
            if (place_free(xtarg, ytarg)) {
                x = xtarg;
                y = ytarg;
                exit;
            }
        }
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement3

var xtarg = x + hor;
var ytarg = y + ver;

//if (place_free(xtarg, ytarg)) {
//    scr_test_move(hor, ver);
//    //x = xtarg;
//    //y = ytarg;
//} else {
if (!scr_test_move(hor, ver, true)) {
    var sweep_interval = 10;
    
    for (var angle = sweep_interval; angle &lt;= 80; angle += sweep_interval) {
        for (var multiplier = -1; multiplier &lt;= 1; multiplier += 2) {      
            var angle_to_check = dir + angle * multiplier;
            
            xtarg = x + lengthdir_x(len / (1 + angle * 0.01), angle_to_check);
            ytarg = y + lengthdir_y(len / (1 + angle * 0.01), angle_to_check);  
            if (place_free(xtarg, ytarg)) {
                x = xtarg;
                y = ytarg;  
                exit;
            }
            
            //hor = lengthdir_x(len, angle_to_check);
            //ver = lengthdir_y(len, angle_to_check);
            //if (scr_test_move(hor, ver, false)) {
            //    exit;
            //}
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Movement4

scr_test_move(hor, ver, true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Collision Mask.

draw_rectangle(bbox_left, bbox_top, bbox_right, bbox_bottom, false);

draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>4</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
